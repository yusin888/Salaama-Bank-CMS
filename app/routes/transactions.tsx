import { useEffect, useState } from "react";

type Transaction = {
  id: number;
  amount: number;
  type: string;
  createdAt: string; // Formatted date string
};

type UserDetails = {
  username: string;
  email: string;
  balance: number;
  createdAt: string; // Formatted date string
  accountNumber: number;
  transactions: Transaction[];
};

export default function AccountStatement() {
  const [userDetails, setUserDetails] = useState<UserDetails | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchAccountStatement = async () => {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("User not authenticated");
        return;
      }

      try {
        const response = await fetch("http://localhost:3000/account-statement", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        if (!response.ok) {
          throw new Error(await response.text());
        }
        const data = await response.json();
        setUserDetails(data);
        console.log(data);
        
      } catch (err) {
        setError((err as Error).message);
      }
    };

    fetchAccountStatement();
  }, []);

  if (error) {
    return <p className="text-red-500 text-center">{error}</p>;
  }

  if (!userDetails) {
    return <p className="text-center">Loading...</p>;
  }

  let runningBalance = userDetails.balance;
  
  // Find first and last transaction dates
  const transactionDates = userDetails.transactions.map(transaction => transaction.createdAt);
  const firstTransactionDate = transactionDates[0];
  const lastTransactionDate = transactionDates[transactionDates.length - 1];
  console.log(transactionDates);
  

  return (
    <div className="min-h-screen bg-gray-100 p-10">
      <div className="max-w-5xl mx-auto bg-white p-8 rounded shadow-md">
        <header className="text-center mb-8">
          <h1 className="text-3xl font-bold text-blue-700">Salaama Bank</h1>
          <p className="text-gray-600">We understand your security</p>
        </header>
        <div className="mb-8 border p-4">
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <p><strong>Account Number:</strong> {userDetails.accountNumber}</p>
              <p><strong>A/C Open Date:</strong> {userDetails.createdAt}</p>
              <p><strong>Account Branch:</strong> Eastleigh</p>
              <p><strong>IFSC Code:</strong> 56021A115</p>
            </div>
            <div>
              <p><strong>Address:</strong> 21A, Colombo street, 4th cross, MG Road, Eastleigh</p>
              <p><strong>City:</strong> Eastleigh 560076</p>
              <p><strong>State:</strong> Nairobi</p>
              <p><strong>Email:</strong> {userDetails.email}</p>
              <p><strong>Phone No:</strong> 0701 989 8582</p>
              <p><strong>Account Type:</strong> Saving</p>
            </div>
          </div>
          <p><strong>Account Statement For The Period {firstTransactionDate} to {lastTransactionDate} </strong></p>
        </div>
        <table className="w-full border-collapse">
          <thead>
            <tr className="bg-gray-200">
              <th className="border p-2 text-left">Date</th>
              <th className="border p-2 text-left">Narration</th>
              <th className="border p-2 text-right">Withdrawal Amount</th>
              <th className="border p-2 text-right">Deposit Amount</th>
              <th className="border p-2 text-right">Total Balance</th>
            </tr>
          </thead>
          <tbody>
            {userDetails.transactions.slice().reverse().map((transaction) => {
              runningBalance -= transaction.amount;
              return (
                <tr key={transaction.id}>
                  <td className="border p-2">{transaction.createdAt}</td>
                  <td className="border p-2">{transaction.type}</td>
                  <td className="border p-2 text-right">{transaction.amount < 0 ? (-transaction.amount).toFixed(2) : "-"}</td>
                  <td className="border p-2 text-right">{transaction.amount > 0 ? transaction.amount.toFixed(2) : "-"}</td>
                  <td className="border p-2 text-right">{runningBalance.toFixed(2)}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
        <footer className="mt-8">
          <p>Generated On: {new Date().toLocaleDateString()}</p>
          <p>Generated By: Requesting Branch</p>
          <p>Code: NET</p>
          <p className="mt-4"><strong>Salaama Microfinance BANK</strong></p>
          <p className="text-sm text-gray-600">Contents of this statement will be considered correct if no error is reported within 30 days of receipt of statement. The address on this statement is that on record with the Bank as at the day of requesting this statement.</p>
          <p className="text-sm text-gray-600">State account branch GSTN: 29AAACH5702L1ZWY</p>
        </footer>
      </div>
    </div>
  );
}
